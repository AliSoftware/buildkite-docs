# How to Trigger a Buildkite Pipeline Using GitHub Actions

[GitHub Actions](https://github.com/features/actions) feature helps automate GitHub-based workflows. You can use a [Buildkte GitHub Action](https://github.com/actions) for triggering a build on a Buildkite pipeline.

{:toc}

The Buildkite GitHub Action allows you to:

* Create builds in Buildkite pipelines and set `commit`, `branch`, `message`.
* Save the build JSON response to `${HOME}/${GITHUB_ACTION}.json` for downstream actions.

<div class="Docs__note">
<h3 class="Docs__note__heading">Prerequisites</h3>
<p>This tutorial assumes some familiarity with GitHub and using GitHub Actions. You can find the official GitHub Actions documentation [here](https://docs.github.com/en/actions/learn-github-actions).</p>

## Installing the Buildkite GitHub Action

1. Search for Trigger Buildkite Pipeline on GitHub Marketplace or follow [this link](https://github.com/marketplace/actions/trigger-buildkite-pipeline).

2. Click install & select the current version.

3. Copy and paste the following snippet into your .yml file.

```
- name: Trigger Buildkite Pipeline
  uses: buildkite/trigger-pipeline-action@v1.2.0
```

<%= image "trigger-buildkite-pipeline.png", width: 2630/2, height: 1692/2, alt: "Trigger Buildkite Pipeline GitHub Action on GitHub" %>

## Creating and configuring the workflow for Buildkite GitHub Actions

1. Create a [Buildkite API access token](/docs/apis/rest-api#authentication) with `write_builds` [scope](/docs/apis/managing-api-tokens#token-scopes), and save it to your GitHub repositoryâ€™s Settings in Secrets.

2. Configure your GitHub Actions workflow with the details of the pipeline to be triggered, and the settings for the build.

For example, the following workflow creates a new Buildkite build on every commit (change my-org to the slug of your org):

```
workflow "Trigger a Buildkite Build" {
  on = "push"
  resolves = ["Build"]
}

action "Build" {
  uses = "buildkite/trigger-pipeline-action@v1.2.0"
  secrets = ["BUILDKITE_API_ACCESS_TOKEN"]
  env = {
    PIPELINE = "my-org/my-deploy-pipeline"
    COMMIT = "HEAD"
    BRANCH = "master"
    MESSAGE = ":github: Triggered from a GitHub Action"
  }
}
```

## Configuting the workflow

Use the following configuration options:

```yml
-
   Env var: PIPELINE
   Description: The pipline to create a build on, in the format <code><org-slug>/<pipeline-slug></code>
   Default:
-
   Env var: COMMIT
   Description: The commit SHA of the build. Optional.
   Default: <code>$GITHUB_SHA</code>
-
   Env var: BRANCH
   Description: The branch of the build. Optional.
   Default: <code>$GITHUB_REF</code>
-
   Env var: MESSAGE
   Description: The message for the build. Optional.
   Default: n
-
   Env var: BUILD_ENV_VARS
   Description: Additional environment variables to set on the build, in JSON format. for instance, <code>{"FOO": "bar"}</code>. Optional.
   Default:
```

## Testing for development

To run the test workflow locally, you can use [act](https://github.com/nektos/act, which will run it just as it does on GitHub:

```
act
```

## Releasing
Create a new GitHub release. The version numbers in the readme will be automatically updated.

See [Trigger-pipeline-action](https://github.com/buildkite/trigger-pipeline-action) for more details, code, or if you would like to contribute or raise an issue for the Buildkite GitHub Action.
